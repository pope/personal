#+title: My Emacs Config
#+author: K. Adam Christensen
#+language: en
#+property: header-args :emacs-lisp :tangle ./init.el :mkdirp yes

* Goal

To configure emacs while also commenting and documenting the process for the setup.

* Methodology

My idea for this config is one part Nix, one part Emacs with [[elisp:(describe-function 'use-package)][=use-package=]]. Nix will supply all of the dependency emacs packages, and =use-pacakge= will be used to configure things.

While Emacs can run in server-mode, I still want the editor to load as quickly as possible. So I will try to lazy load as much as possible when I can - even to the point it may be aggressive.

In order to use changes in this file, use =M-x org-babel-tangle= to export the elisp in here to the =init.el= file.

* Enable lexical binding

Not sure what this does for performance or how the init functions, but adding it because.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Tuning for speed

The Emacs garbage collector runs many times during app start. So at the start, we increase the amount of GC temporarily at the start. At the end of this doc, we can reset it (though not quite as low). The default is 800kb.

References:
  - https://emacsconf.org/2023/talks/gc/
  - https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-emacs.org

#+begin_src emacs-lisp
  ;; Measured in bytes.
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 8 1000 1000)
                    gc-cons-percentage 0.1)))
#+end_src

* Core Settings

** Color Theme

Using the [[https://github.com/doomemacs/themes][=doom-themes=]]. It's a nice set of themes, though it doesn't contain Catppuccin or Rose-Pine. This is in the core settings and not UI primarily because we want this to happen as early as possible. If not, we can get a flash of white as Emacs loads.

#+begin_src emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :config
    (load-theme 'doom-one t)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Transparency

I like a little transparency, but sometimes it can be a tad jank. The function =pope-set-background-alpha= is there to interactively set the transparency to any value I want. And I can always customize the variable per device if ever I so should choose.

#+begin_src emacs-lisp
  (defun pope-set-background-alpha (val)
    (interactive "nAlpha: ")
    (set-frame-parameter nil 'alpha-background val)
    (add-to-list 'default-frame-alist `(alpha-background . ,val)))
#+end_src

:NOTE:
This does make the =menu-bar= on my Linux machine with a GTK show as fully transparent background. And this mode doesn't work for transparency in TTY mode.
:END:

** Custom file

I don't want quick Emacs customizations to show up in the init file. So we can add it to it's own file.

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file t)
#+end_src

** Config

First, let's put extra emacs files into the =.emacs.d= directory.

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms `((".*" "~/.emacs.d/auto-saves/" t))
        backup-directory-alist `(("." . "~/.emacs.d/backups/")))
  (recentf-mode 1)
  (save-place-mode 1)
#+end_src

Next, we can auto-revert some buffers when things change on disk

#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode t)
#+end_src

* Editing

** Basics

The first thing we can set up for the editing experience is to leverage project EditorConfig settings. This is something that's available with Emacs 30, and can be set with a custom variable.

#+begin_src emacs-lisp
  (use-package emacs
    :custom (editorconfig-mode t))
#+end_src

Next, we can use =expand-region= so that we can select things in strings, or parenthesis, etc.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-c SPC" . er/expand-region))
#+end_src

Finally, =multiple-cursors= allows for quick selection and edit at once

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind
    ("C-S-c C-S-c"  . mc/edit-lines)
    ("C->"          . mc/mark-next-like-this)
    ("C-<"          . mc/mark-previous-like-this)
    ("C-c C-<"      . mc/mark-all-like-this))
#+end_src

** Clipboard

When on [[https://wayland.freedesktop.org/][Wayland]] I was noticing that copy/paste was not working. Using [[https://elpa.gnu.org/packages/xclip.html][xclip]] seems to address that.

#+begin_src emacs-lisp
  (use-package xclip
    :config (xclip-mode 1))
#+end_src

** Vim style

[[https://github.com/emacs-evil/evil][Evil mode]] exists to emulate vim modes and shortcuts. I will keep it around, but not exactly load it and use it immediately. But run =M-x evil-mode= to turn it on.

#+begin_src emacs-lisp
  (use-package evil
    :commands (evil-mode))
#+end_src

* Completions

Adding some modern completion code for Emacs

Sources:
  - https://protesilaos.com/codelog/2024-02-17-emacs-modern-minibuffer-packages/
  - https://www.youtube.com/watch?v=SOxlQ7ogplA

** Minibuffer

*** Vertico

[[https://github.com/minad/vertico][=vertico=]] positions completions in a vertical column in the minibuffer.

#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)
    (vertico-resize nil)
    :config
    (vertico-mode 1))
#+end_src

The vertico docs also recommend the following configs

#+begin_src emacs-lisp
  ;; Enable saving of minibuffer history
  (use-package savehist
    :hook (after-init . savehist-mode))

  (use-package emacs
    :custom
    ;; Yo dawg, I heard you like minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x that are incompatible for the current mode.
    (read-extended-command-predicate #'command-completion-default-include-p)

    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only-mode t cursor-intangible-mode t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src

*** Marginalia

[[https://github.com/minad/marginalia][=marginalia=]] adds extra context in the minibuffer for whatever is being completed.

#+begin_src emacs-lisp
  (use-package marginalia
    :demand 1
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :config
    (marginalia-mode 1))
#+end_src

*** Orderless

[[https://github.com/oantolin/orderless][=orderless=]] is a package that divides completion patterns by spaces to match the components in order.

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Consult

[[https://github.com/minad/consult][=consult=]] provides search and navigation with completion functions. The consult documentation includes a lot more options than I'm using now - so I will revisit to see if I want to add more.

#+begin_src emacs-lisp
  (use-package consult-
    :bind (:map global-map
           ("M-s M-r" . consult-recent-file)
           ("M-s M-g" . consult-ripgrep)
           ("M-s M-f" . consult-fd)
           ("M-s M-o" . consult-outline)
           ("M-s M-l" . consult-line)
           ("M-s M-b" . consult-buffer)))
#+end_src

*** Embark

[[https://github.com/oantolin/embark][=embark=]] provides mini-buffer actions for a target point.

#+begin_src emacs-lisp
  (use-package embark
    :bind (("C-." . embark-act)         ;; pick some comfortable binding
           ("C-;" . embark-dwim)        ;; good alternative: M-.
           ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
     ;; Optionally replace the key help with a completing-read interface
     (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src

Then we can join embark and consult together

#+begin_src emacs-lisp
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** In-Buffer

*** Corfu

[[https://github.com/minad/corfu][=corfu=]] does in-buffer completions with a pop-up.

#+begin_src emacs-lisp
  (use-package corfu
    :config
    (global-corfu-mode 1))
#+end_src

In the regular Emacs config, we can make the =<TAB>= key trigger an autocomplete.

#+begin_src emacs-lisp
  (use-package emacs
    :custom (tab-always-indent 'complete))
#+end_src

The settings above work fine in GUI mode, but for terminal, we need a separate package for that.

#+begin_src emacs-lisp
  (unless (display-graphic-p)
    (use-package corfu-terminal
      :after corfu
      :config (corfu-terminal-mode 1)))
#+end_src

=corfu= can also use =orderless=, and since it's configured above, there isn't anything to worry about here.

*** Cape

[[https://github.com/minad/cape][=cape=]] provides additional =capf= backends. This is something to consider adding to my configuration.

* The UI

This is all of the UI tweaks - outside of themeing. The theme config happens early in the startup to avoid flashes of white if the theme were to load later in the init process.

** Basic Config

Some basic emacs stuff to add/remove UI to emacs.

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (display-line-numbers-grow-only t)
    (inhibit-startup-screen t)		; Don't show startup message
    (confirm-kill-emacs 'y-or-n-p)	; Less typing when quitting
    :config
    (column-number-mode 1)
    (global-display-line-numbers-mode 1)
    (global-hl-line-mode 1)
    (global-visual-line-mode 1)

    (tool-bar-mode -1)

    (winner-mode 1))
#+end_src

** Diffs

=diff-hl= provides a way to see changes to the file in the gutter/fringe of the file, and not just Git. It does require =vc-handled-backends= to be set - which is by default for my Emacs installation. Through the use of the margin-mode variant, the diff changes can be highlighted from the terminal as well.

#+begin_src emacs-lisp
  (use-package diff-hl
    :custom
    (diff-hl-update-async t)
    (diff-hl-margin-mode t)
    :hook
    (after-init . global-diff-hl-mode))
#+end_src

** Nerd Icons

This package is nice if I want to enter in some =nerd-icons-insert=. It also has the benefit of adding Symbols for Nerd Font as a font for the regions where the font is applicable.

#+begin_src emacs-lisp
  (use-package nerd-icons
    :config
    (when (display-graphic-p)
      (nerd-icons-set-font)))
#+end_src

There are some packages that make nerd fonts work with other packages or core emacs components.

#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))
  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
  (use-package nerd-icons-corfu
    :after corfu
    :config (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

** Ligatures

I like ligatures. So this sets those up for all programming modes.

#+begin_src emacs-lisp
  (use-package ligature
    :config
    ;; Enable all ligatures in programming modes
    (ligature-set-ligatures
     'prog-mode
     '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
       "\\\\" "://"))
    (global-ligature-mode t))
#+end_src

** Scrolling

We could rely on the scrollbars provided by Emacs, but for whatever reason, I want to have more fun - and =nyan-mode= does that. It doesn't auto activate, but it's there! Also, scrolling is a little stiff by default, so we can enable pixel-level scrolling for a bit of smoothness.

#+begin_src emacs-lisp
  (use-package nyan-mode
    :custom (nyan-cat-face-number 4))

  (use-package emacs
    :custom
    (mouse-wheel-tilt-scroll t)
    (scroll-conservatively 101)
    (scroll-margin 0)
    :config
    (scroll-bar-mode -1)
    (pixel-scroll-precision-mode 1))
#+end_src

Scrolling can also be wonky when using a mouse in TTY mode. So we can enable =xterm-mouse-mode= to make that - and other things like menu selection - work.

#+begin_src emacs-lisp
  (unless (display-graphic-p)
    (use-package emacs
      :config (xterm-mouse-mode 1)))
#+end_src

** Indentation

I like seeing a line for where the indentation levels.

#+begin_src emacs-lisp
  (use-package indent-bars
    :custom
    (indent-bars-color '(highlight :face-bg t :blend 0.2))
    (indent-bars-highlight-current-depth '(:blend 0.5))
    (indent-bars-pad-frac 0.1)
    (indent-bars-pattern ".")
    (indent-bars-starting-column 0)
    (indent-bars-treesit-support t)
    (indent-bars-width-frac 0.1)
    (indent-bars-zigzag nil)
    :config (require 'indent-bars-ts)
    :hook (prog-mode . indent-bars-mode))
#+end_src

** Modeline

Using =doom-modeline= to have a fancier looking modeline bar at the bottom of the editor. The minor modes are hidden, as it takes up extra room in the modeline, and it's often incomplete. =M-x describe-mode= (=C-h m=) is a good way to get the full info about what is enabled anyway.

:NOTE:
=S-TAB= is a good way to toggle the headings in the mode *Help* buffer to get a quick overview of things.
:END:

#+begin_src emacs-lisp
  (use-package doom-modeline
    :custom
    (doom-modeline-minor-modes nil)
    :hook
    (after-init . doom-modeline-mode))
#+end_src

* Programming

Lastly, let's add support for programming languages. =nix-mode= (and one with treesit) and =zig-mode= (and also with treesit) are installed through Nix and have auto-loads configured. So there isn't anything that we need to do here. The goal with installing =-mode= and =-ts-mode= packages is to use ts version as the main major mode, but still use features from the normal mode.

Speaking of treesit and treesitter, I do want Emacs to use the =-ts-mode= versions of major modes. With Emacs 29, there's a remap list where we can say instead of loading one mode, load the next. Learn more on the [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][How to get started with tree-sitter article]] on /Mastering Emacs/ site.

#+begin_src emacs-lisp
  (setq major-mode-remap-alist
        '(
          (bash-mode . bash-ts-mode)
          (c-mode . c-ts-mode)
          (c++-mode . c++-ts-mode)
          (c-or-c++-mode . c-or-c++-ts-mode)
          (css-mode . css-ts-mode)
          (js-mode . js-ts-mode)
          (js2-mode . js-ts-mode)
          (java-mode . java-ts-mode)
          (json-mode . json-ts-mode)
          (ruby-mode . ruby-ts-mode)
          (nix-mode . nix-ts-mode)
          (python-mode . python-ts-mode)
          (typescript-mode . typescript-ts-mode)
          (yaml-mode . yaml-ts-mode)
          (zig-mode . zig-ts-mode)))
#+end_src

:NOTE:
Using =treesit-auto= is a common tool for doing the mapping above, but it also has code to download TreeSit parsers if they are not available. Nix already has those parsers - so I control adding through that. Thus, =treesit-auto= does more than I need and I can just keep it simple here.
:END:

Next up, there are some treesit modes that are available, but they do not autoload when visiting a buffer. So we shall address that next.

#+begin_src emacs-lisp
  (use-package go-ts-mode
    :mode "\\.go\\'")
  (use-package rust-ts-mode
    :mode "\\.rs\\'")
#+end_src

** LSP support with Eglot

For better code complete and code searching, we can use an LSP. =Eglot= gives us that library for doing the integration, and most things work right out of the box - especially for the =-mode= languages. But because I'm doing with the =-ts-mode= versions, there is some tweaking I need to do to properly map the ts-mode version to an LSP.

#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
    (dolist (el '((nix-ts-mode . ("nixd"))
                  (zig-ts-mode . ("zls"))))
      (add-to-list 'eglot-server-programs el)))
#+end_src

And we can auto-start =eglot= when some modes activate

#+begin_src emacs-lisp
  (use-package eglot
    :hook ((c-ts-mode . eglot-ensure)
           (go-ts-mode . eglot-ensure)
           (nix-ts-mode . eglot-ensure)
           (rust-ts-mode . eglot-ensure)
           (zig-ts-mode . eglot-ensure)))
#+end_src

** Direnv support

I don't only use Nix for my config files - I also use it for all of my projects. Many/most of those projects use =direnv= to create a local environment where the tools needed to build the project are made available - including LSP servers. So to make things easy, we can have Emacs bring in those configurations automatically.

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+end_src

** A Terminal

I have a complex terminal setup - it's where I tend to do most of my work, and so I use fancy (overlay complicated) TUIs and icons and settings - all of which can make =vterm= have problems displaying everything unless we tweak a few things. Some of the properties above like showing line numbers or a visual line don't make sense for a vterm session - so those get disable. The odd one though is =toggle-truncate-lines=. The Oh-My-Posh prompt can cause the line (which should be on just one line) break to another line. Then there are TUI apps like =lazygit= which can also exibit this longer-than-one-line issue. Truncating - while not perfect, does a better job of making things readible and usable.

#+begin_src emacs-lisp
  (use-package vterm
    :commands (vterm)
    :config
    (add-hook 'vterm-mode-hook
              (lambda ()
                (display-line-numbers-mode -1)
                (visual-line-mode -1)
                (toggle-truncate-lines 1))))
#+end_src
